from src.data_preparation import get_clean_data, normalize_features, add_features
from src.anomaly_detection import detect_anomalies, detect_anomalies_lof
from src.visualization import plot_metrics, plot_distribution, interactive_plot_metrics, interactive_plot_distribution
from src.generate_report import generate_report

def main():
    # Load or generate then clean the dataset
    data = get_clean_data(n_samples=500, save_if_generated=True)

    # Normalize the features
    data = normalize_features(data)

    # Calcul the ratio likes/views for each observation
    data = add_features(data)



    # Detect anomalies with IsolationForest and LOF
    data = detect_anomalies(data, contamination=0.05) 
    data = detect_anomalies_lof(data, contamination=0.05)
    
    
    # Visualize and save the plots
    plot_metrics(data)  # Save by default : plots/metrics_scatter.png
    plot_distribution(data, column='views')  # Save : plots/distribution_views.png

    # Interactive vizualisation
    interactive_plot_metrics(data)

    # Interactif histogram
    interactive_plot_distribution(data, column='views')
    
    # Calcul the global statistics
    total_views = data['views'].sum()
    total_likes = data['likes'].sum()
    anomaly_count = data['anomaly'].sum()
    ratio = total_likes / total_views if total_views != 0 else 0
    
    # Accompagnying explanations for the metrics and distribution plots
    metrics_explanation = (
        "Ce scatter plot montre la relation entre les vues et les likes.\n"
        "Les points en rouge indiquent les anomalies détectées (où le nombre de likes est incohérent par rapport aux vues).\n"
        "Un nombre élevé de points rouges pourrait indiquer un problème dans le système de mesure des interactions."
    )
    distribution_explanation = (
        "L'histogramme présente la distribution des vues à travers l'ensemble du dataset.\n"
        "Cela permet de visualiser la dispersion des valeurs et d'identifier d'éventuelles irrégularités."
    )
    
    # Assess the paths to the images generated by the visualization functions
    metrics_image = 'plots/metrics_scatter.png'
    distribution_image = 'plots/distribution_views.png'
    
    # Generate the PDF report
    generate_report(total_views, total_likes, anomaly_count, ratio,
                    metrics_image, distribution_image,
                    metrics_explanation, distribution_explanation,
                    output_file="FakeMetrics_Report.pdf")

if __name__ == '__main__':
    main()
